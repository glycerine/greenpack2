// Code generated by GREENPACK (github.com/glycerine/greenpack2). DO NOT EDIT.

package main

import (
	"github.com/glycerine/greenpack2/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *SliceOfSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields1zgensym_e3779055254b0672_2 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields1zgensym_e3779055254b0672_2 uint32
	totalEncodedFields1zgensym_e3779055254b0672_2, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft1zgensym_e3779055254b0672_2 := totalEncodedFields1zgensym_e3779055254b0672_2
	missingFieldsLeft1zgensym_e3779055254b0672_2 := maxFields1zgensym_e3779055254b0672_2 - totalEncodedFields1zgensym_e3779055254b0672_2

	var nextMiss1zgensym_e3779055254b0672_2 int32 = -1
	var found1zgensym_e3779055254b0672_2 [maxFields1zgensym_e3779055254b0672_2]bool
	var curField1zgensym_e3779055254b0672_2 string

doneWithStruct1zgensym_e3779055254b0672_2:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft1zgensym_e3779055254b0672_2 > 0 || missingFieldsLeft1zgensym_e3779055254b0672_2 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft1zgensym_e3779055254b0672_2, missingFieldsLeft1zgensym_e3779055254b0672_2, msgp.ShowFound(found1zgensym_e3779055254b0672_2[:]), decodeMsgFieldOrder1zgensym_e3779055254b0672_2)
		if encodedFieldsLeft1zgensym_e3779055254b0672_2 > 0 {
			encodedFieldsLeft1zgensym_e3779055254b0672_2--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField1zgensym_e3779055254b0672_2 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss1zgensym_e3779055254b0672_2 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss1zgensym_e3779055254b0672_2 = 0
			}
			for nextMiss1zgensym_e3779055254b0672_2 < maxFields1zgensym_e3779055254b0672_2 && (found1zgensym_e3779055254b0672_2[nextMiss1zgensym_e3779055254b0672_2] || decodeMsgFieldSkip1zgensym_e3779055254b0672_2[nextMiss1zgensym_e3779055254b0672_2]) {
				nextMiss1zgensym_e3779055254b0672_2++
			}
			if nextMiss1zgensym_e3779055254b0672_2 == maxFields1zgensym_e3779055254b0672_2 {
				// filled all the empty fields!
				break doneWithStruct1zgensym_e3779055254b0672_2
			}
			missingFieldsLeft1zgensym_e3779055254b0672_2--
			curField1zgensym_e3779055254b0672_2 = decodeMsgFieldOrder1zgensym_e3779055254b0672_2[nextMiss1zgensym_e3779055254b0672_2]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField1zgensym_e3779055254b0672_2)
		switch curField1zgensym_e3779055254b0672_2 {
		// -- templateDecodeMsg ends here --

		case "Matrix_zid00_slc":
			found1zgensym_e3779055254b0672_2[0] = true
			var zgensym_e3779055254b0672_3 uint32
			zgensym_e3779055254b0672_3, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Matrix) >= int(zgensym_e3779055254b0672_3) {
				z.Matrix = (z.Matrix)[:zgensym_e3779055254b0672_3]
			} else {
				z.Matrix = make([][]byte, zgensym_e3779055254b0672_3)
			}
			for zgensym_e3779055254b0672_0 := range z.Matrix {
				z.Matrix[zgensym_e3779055254b0672_0], err = dc.ReadBytes(z.Matrix[zgensym_e3779055254b0672_0])
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss1zgensym_e3779055254b0672_2 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SliceOfSlice
var decodeMsgFieldOrder1zgensym_e3779055254b0672_2 = []string{"Matrix_zid00_slc"}

var decodeMsgFieldSkip1zgensym_e3779055254b0672_2 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z *SliceOfSlice) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (len(z.Matrix) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *SliceOfSlice) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_e3779055254b0672_4 [1]bool
	fieldsInUse_zgensym_e3779055254b0672_5 := z.fieldsNotEmpty(empty_zgensym_e3779055254b0672_4[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_e3779055254b0672_5 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'SliceOfSlice'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x63, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_e3779055254b0672_4[0] {
		// write "Matrix_zid00_slc"
		err = en.Append(0xb0, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Matrix)))
		if err != nil {
			return
		}
		for zgensym_e3779055254b0672_0 := range z.Matrix {
			err = en.WriteBytes(z.Matrix[zgensym_e3779055254b0672_0])
			if err != nil {
				return
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SliceOfSlice) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Matrix_zid00_slc"
		o = append(o, 0xb0, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Matrix)))
		for zgensym_e3779055254b0672_0 := range z.Matrix {
			o = msgp.AppendBytes(o, z.Matrix[zgensym_e3779055254b0672_0])
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SliceOfSlice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *SliceOfSlice) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields6zgensym_e3779055254b0672_7 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields6zgensym_e3779055254b0672_7 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields6zgensym_e3779055254b0672_7, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft6zgensym_e3779055254b0672_7 := totalEncodedFields6zgensym_e3779055254b0672_7
	missingFieldsLeft6zgensym_e3779055254b0672_7 := maxFields6zgensym_e3779055254b0672_7 - totalEncodedFields6zgensym_e3779055254b0672_7

	var nextMiss6zgensym_e3779055254b0672_7 int32 = -1
	var found6zgensym_e3779055254b0672_7 [maxFields6zgensym_e3779055254b0672_7]bool
	var curField6zgensym_e3779055254b0672_7 string

doneWithStruct6zgensym_e3779055254b0672_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_e3779055254b0672_7 > 0 || missingFieldsLeft6zgensym_e3779055254b0672_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_e3779055254b0672_7, missingFieldsLeft6zgensym_e3779055254b0672_7, msgp.ShowFound(found6zgensym_e3779055254b0672_7[:]), unmarshalMsgFieldOrder6zgensym_e3779055254b0672_7)
		if encodedFieldsLeft6zgensym_e3779055254b0672_7 > 0 {
			encodedFieldsLeft6zgensym_e3779055254b0672_7--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField6zgensym_e3779055254b0672_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_e3779055254b0672_7 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss6zgensym_e3779055254b0672_7 = 0
			}
			for nextMiss6zgensym_e3779055254b0672_7 < maxFields6zgensym_e3779055254b0672_7 && (found6zgensym_e3779055254b0672_7[nextMiss6zgensym_e3779055254b0672_7] || unmarshalMsgFieldSkip6zgensym_e3779055254b0672_7[nextMiss6zgensym_e3779055254b0672_7]) {
				nextMiss6zgensym_e3779055254b0672_7++
			}
			if nextMiss6zgensym_e3779055254b0672_7 == maxFields6zgensym_e3779055254b0672_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_e3779055254b0672_7
			}
			missingFieldsLeft6zgensym_e3779055254b0672_7--
			curField6zgensym_e3779055254b0672_7 = unmarshalMsgFieldOrder6zgensym_e3779055254b0672_7[nextMiss6zgensym_e3779055254b0672_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_e3779055254b0672_7)
		switch curField6zgensym_e3779055254b0672_7 {
		// -- templateUnmarshalMsg ends here --

		case "Matrix_zid00_slc":
			found6zgensym_e3779055254b0672_7[0] = true
			if nbs.AlwaysNil {
				(z.Matrix) = (z.Matrix)[:0]
			} else {

				var zgensym_e3779055254b0672_8 uint32
				zgensym_e3779055254b0672_8, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Matrix) >= int(zgensym_e3779055254b0672_8) {
					z.Matrix = (z.Matrix)[:zgensym_e3779055254b0672_8]
				} else {
					z.Matrix = make([][]byte, zgensym_e3779055254b0672_8)
				}
				for zgensym_e3779055254b0672_0 := range z.Matrix {
					if nbs.AlwaysNil || msgp.IsNil(bts) {
						if !nbs.AlwaysNil {
							bts = bts[1:]
						}
						z.Matrix[zgensym_e3779055254b0672_0] = z.Matrix[zgensym_e3779055254b0672_0][:0]
					} else {
						z.Matrix[zgensym_e3779055254b0672_0], bts, err = nbs.ReadBytesBytes(bts, z.Matrix[zgensym_e3779055254b0672_0])

						if err != nil {
							return
						}
					}
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_e3779055254b0672_7 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SliceOfSlice
var unmarshalMsgFieldOrder6zgensym_e3779055254b0672_7 = []string{"Matrix_zid00_slc"}

var unmarshalMsgFieldSkip6zgensym_e3779055254b0672_7 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SliceOfSlice) Msgsize() (s int) {
	s = 1 + 17 + msgp.ArrayHeaderSize
	for zgensym_e3779055254b0672_0 := range z.Matrix {
		s += msgp.BytesPrefixSize + len(z.Matrix[zgensym_e3779055254b0672_0])
	}
	return
}
